<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;

/**
 * Implement hook_form_FORM_ID_alter().
 */
function bpi_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $selected_content_type = \Drupal::config('bpi.content_mapping')
    ->get('bpi_content_type');
  $user_has_access = \Drupal::currentUser()->hasPermission('bpi push content');
  if ($form_id !== 'node_' . $selected_content_type . '_edit_form' || !$user_has_access) {
    return;
  }

  $form['bpi_settings'] = [
    '#type' => 'fieldset',
    '#title' => t('Biblioteks Produceret Indhold'),
    '#weight' => 99,
    '#attached' => [
      'library' => [
        'bpi/bpi_node_form_alter',
      ],
    ],
  ];

  $loaded_node = $form_state->getFormObject()->getEntity();
  $bpi_configured = bpi_service_is_configured();
  $node_pushed = !empty($loaded_node->bpi_id);

  $form['bpi_settings']['send_to_bpi'] = [
    '#type' => 'checkbox',
    '#title' => t('Send to BPI'),
    '#disabled' => $bpi_configured === FALSE || $node_pushed,
    '#description' => $node_pushed ? t('This node is already pushed to BPI.') : '',
  ];

  $form['bpi_settings']['configurations'] = [
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => [
      'visible' => [
        ':input[name="send_to_bpi"]' => [
          'checked' => TRUE,
        ],
      ],
    ],
  ];

  $form['bpi_settings']['configurations']['dropdowns'] = [
    '#type' => 'container',
  ];

  $vocabularies = bpi_get_bpi_dictionaries();

  $categories = array_values($vocabularies['category']);
  $form['bpi_settings']['configurations']['dropdowns']['bpi_push_category'] = [
    '#type' => 'select',
    '#title' => t('Category'),
    '#options' => array_combine($categories, $categories),
    '#default_value' => 'Litteratur',
  ];

  $audiences = array_values($vocabularies['audience']);
  $form['bpi_settings']['configurations']['dropdowns']['bpi_push_audience'] = [
    '#type' => 'select',
    '#title' => t('Audience'),
    '#options' => array_combine($audiences, $audiences),
    '#default_value' => 'Voksne',
  ];

  $form['bpi_settings']['configurations']['checkboxes'] = [
    '#type' => 'container',
  ];

  $form['bpi_settings']['configurations']['checkboxes']['bpi_push_images'] = [
    '#type' => 'checkbox',
    '#title' => t('Push with images'),
    '#description' => t('You should have permission to publish the images before selecting this option.'),
    '#default_value' => FALSE,
  ];

  $form['bpi_settings']['configurations']['checkboxes']['bpi_push_ccl'] = [
    '#type' => 'checkbox',
    '#title' => t('I want to be anonymous'),
    '#description' => t('If checked, the content will be pushed as anonymous to BPI.'),
  ];

  $form['bpi_settings']['configurations']['checkboxes']['bpi_push_editable'] = [
    '#type' => 'checkbox',
    '#title' => t('Editable'),
    '#description' => t('If checked, the content will be marked as non-editable. It is not enforced, but only recommended that the content is not changed after syndication.'),
    '#default_value' => TRUE,
  ];


  $validate_handler = 'Drupal\bpi\Controller\FormHandlers::bpi_push_validate';
  $form['#validate'][] = $validate_handler;

  $submit_handler = 'Drupal\bpi\Controller\FormHandlers::bpi_push_submit';
  $form['#submit'][] = $submit_handler;
  $form['actions']['submit']['#submit'][] = $submit_handler;
}

/**
 * Fetch dictionaries from BPI ws.
 *
 * @return array
 *   Nested array of dictionaries, keyed by dictionary
 *   type.
 */
function bpi_get_bpi_dictionaries() {
  $dictionaries = ['category' => [], 'audience' => []];

  /** @var \Drupal\bpi\Services\BpiService $bpiService */
  $bpiService = \Drupal::service('bpi.service');

  try {
    $dictionaries = $bpiService->getInstance()->getDictionaries();
  } catch (\Exception $e) {
    \Drupal::logger('bpi')->error($e->getMessage());
  }

  return $dictionaries;
}

/**
 * Convert node object to array structure, suitable for pushing to the well.
 *
 * @param stdClass $node
 *   Node object being processed.
 * @param string $category
 *   Selected category at the BPI side.
 * @param string $audience
 *   Selected audience at the BPI side.
 * @param bool $with_images
 *   Include images or not.
 * @param bool $authorship
 *   Include author name or not.
 * @param int $editable
 *   1 - to mark as editable, 0 - not editable.
 * @param bool $with_refs
 *   If TRUE ting material reference are extracted.
 *
 * @return array
 *   An array of node values, used by the BPI web service.
 *
 * @todo Add a hook allowing changing the values before they are sent to BPI.
 * @todo Split this function into smaller parts (ex: images, texts).
 */
function bpi_convert_to_bpi(Node $node, $category, $audience, $with_images = FALSE, $anonymous = FALSE, $editable = 1, $with_refs = TRUE): array {
  $bpi_content = [];

  $bpi_service_settings = \Drupal::config('bpi.service_settings');

  $bpi_content['agency_id'] = $bpi_service_settings->get('bpi_agency_id');
  $bpi_content['local_id'] = $node->id();
  $bpi_content['bpi_id'] = NULL;
  $bpi_content['url'] = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], [
    'absolute' => TRUE,
    'alias' => TRUE,
  ])->toString();
  $bpi_content['data'] = '';

  $user = User::load($node->getOwnerId());
  $bpi_content['firstname'] = $user->getDisplayName();
  $bpi_content['lastname'] = '';

  $bpi_content['title'] = $node->getTitle();

  $bpi_content_mapping = \Drupal::config('bpi.content_mapping');
  $teaser_field_setting = $bpi_content_mapping->get('bpi_field_teaser');
  $body_field_setting = $bpi_content_mapping->get('bpi_field_body');
  $teaser_field = $node->{$teaser_field_setting}->view();
  $body_field = $node->{$body_field_setting}->view();

  $teaser_field_values = $teaser_field['#items']->getValue();
  $body_field_values = $body_field['#items']->getValue();

  $teaser = !empty($teaser_field_values[0]['summary']) ? $teaser_field_values[0]['summary'] : $teaser_field_values[0]['value'];
  $body = $body_field_values[0]['value'];

  if (strcmp($teaser, $body) === 0) {
    $teaser = '';
  }

  $bpi_content['teaser'] = html_entity_decode($teaser);
  $bpi_content['body'] = html_entity_decode($body);

  $dt = new \DateTime();
  $dt->setTimestamp($node->getChangedTime());
  $bpi_content['creation'] = $dt->format(DateTime::W3C);
  $bpi_content['type'] = $node->getType();
  $bpi_content['category'] = $category;
  $bpi_content['audience'] = $audience;
  $bpi_content['related_materials'] = [];
  $bpi_content['editable'] = (int) $editable;
  $bpi_content['authorship'] = (boolean) $anonymous === FALSE;
  $bpi_content['assets'] = [];

  // Collect tags.
  $tags_field_setting = $bpi_content_mapping->get('bpi_field_tags');
  $tags_field = $node->{$tags_field_setting}->view();
  $tags = [];
  if ($tags_field['#field_type'] == 'entity_reference') {
    foreach ($tags_field['#items']->referencedEntities() as $referencedEntity) {
      $tags[] = $referencedEntity->getName();
    }
  }
  $bpi_content['tags'] = implode(',', $tags);

  // Collect images.
  if ($with_images) {
    $potential_image_fields = ['image'];
    $image_fields = bpi_find_field_instances($node->getType(), $potential_image_fields);

    foreach (array_keys($image_fields) as $image_field_name) {
      $image_field = $node->{$image_field_name}->view();
      /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $item */
      foreach ($image_field['#items'] as $item) {
        $file_uri = $item->entity->getFileUri();

        // TODO: Image pushing/syndication is broken.
        $bpi_content['assets'][] = array(
          'path' => file_create_url($file_uri),
          'alt' => $item->alt ?: $item->entity->getFilename(),
          'title' => $item->title ?: $item->entity->getFilename(),
          'type' => bpi_get_image_type($image_field_name, $node),
          'name' => $item->entity->getFilename(),
          'extension' => pathinfo($file_uri, PATHINFO_EXTENSION),
        );
      }
    }
  }

  // TODO: Image pushing/syndication is not support for inline images.
  $bpi_content['body'] = preg_replace(
    '~(<p>)?<img.+?/>(</p>)?~is',
    '',
    $bpi_content['body']
  );

  // Collect materials.
  $materials_field_setting = $bpi_content_mapping->get('bpi_field_materials');
  $materials_field = $node->{$materials_field_setting}->view();
  $materials = [];
  foreach ($materials_field['#items']->getValue() as $item) {
    // TODO: Small hack for BPI validation, this might not be suitable id at all.
    $materials[] = '870970-basis:' . $item['value'];
  }
  $bpi_content['related_materials'] = $materials;

  return $bpi_content;
}

/**
 * Track nodes push/syndication actions.
 *
 * @param $nid
 *   Node id.
 * @param $bid
 *   BPI id.
 * @param array $params
 *   BPI params
 * @param $status
 *   BPI status.
 *
 * @throws \Exception
 */
function bpi_update_syndicated($nid, $status, $bid = 0, array $params = []) {
  $fields = [
    'nid' => $nid,
    'data' => serialize($params),
    'timestamp' => \Drupal::time()->getRequestTime(),
    'status' => $status,
    'bid' => $bid,
  ];

  $query = Database::getConnection()->merge('bpi_syndicated');
  $query->condition('nid', $nid);
  $query->fields($fields);
  $query->execute();
}

/**
 * Set user friendly feedback message based on exception error codes.
 *
 * @param int $http_code
 *   Error code returned from BPI.
 */
function bpi_error_message($http_code) {
  switch ($http_code) {
    case 422:
      $msg = t('Similar resource already exists in the BPI service.');
      break;

    case 406:
      $msg = t('Trying to syndicate content by owner who already did that is not allowed.');
      break;

    case 500;
      $msg = t('Internal server error. Please try once more or contact your site administrator.');
      break;

    default:
      $msg = t('Error occurred when pushing content to the BPI data well. Check reports for more information.');
      break;
  }

  drupal_set_message($msg, 'error');
  \Drupal::logger('bpi')->error($msg);
}

/**
 * Check that BPI service configuration have been set.
 *
 * If it have not been configured yet error message are set.
 *
 * @return bool
 *   If service is configured TRUE else FALSE is returned.
 */
function bpi_service_is_configured() {
  $settings = \Drupal::config('bpi.service_settings');

  $endpoint = $settings->get('bpi_service_url');
  $agency_id = $settings->get('bpi_agency_id');
  $api_key = $settings->get('bpi_api_key');
  $secret_key = $settings->get('bpi_secret_key');

  $configured = TRUE;

  $settings_url = Url::fromRoute('bpi.settings');
  $settings_link = Link::fromTextAndUrl(t('BPI settings'), $settings_url);
  $message = t('In order to push this content to BPI, please check @settings_url.', ['@settings_url' => $settings_link->toString()]);

  if (empty($endpoint) || empty($agency_id) || empty($api_key) || empty($secret_key)) {
    drupal_set_message($message, 'error');
    $configured = FALSE;
  }

  return $configured;
}

/**
 * Implements hook_node_load().
 *
 * Enrich node object with bpi_id, if any.
 */
function bpi_node_load($nodes) {
  $node_ids = array_keys($nodes);

  $result = Database::getConnection()->select('bpi_syndicated', 'bs')
    ->fields('bs', [
      'nid',
      'bid',
    ])
    ->condition('nid', $node_ids, 'IN')
    ->execute()
    ->fetchAllAssoc('nid');

  foreach ($nodes as $nid => &$node) {
    if (isset($result[$nid])) {
      $node->bpi_id = $result[$nid]->bid;
    }
  }
}

/**
 * Get a list of fields, for a certain node type.
 *
 * Simplifies and filters the output of the core field_info_instances()
 * function.
 *
 * Filtering means that we do not want text values into image fields, etc.
 *
 * @param string $node_type
 *   Node type machine name, whose fields list is expected.
 *
 * @param array $allowed_types
 *   Filter by these instance types.
 *
 * @return array
 *   An array with the fields, for the specified node type.
 */
function bpi_find_field_instances($node_type, array $allowed_types): array {
  if (empty($node_type)) {
    return [];
  }

  $entityManager = \Drupal::service('entity.manager');
  $node_fields = array_filter($entityManager->getFieldDefinitions('node', $node_type), function ($field_definition) {
    return $field_definition instanceof FieldConfigInterface;
  });

  $fields = [];
  /** @var \Drupal\field\Entity\FieldConfig $field */
  foreach ($node_fields as $field) {
    if (in_array($field->getType(), $allowed_types)) {
      $fields[$field->getName()] = $field->getLabel();
    }
  }

  return $fields;
}

/**
 * Compute the image type from a field name on a node.
 *
 * TODO: Purpose of this is unknown.
 *
 * @param string $image_field_name
 *   The image field name.
 * @param Node $node
 *   The node.
 *
 * @return NULL|string
 *   The image type.
 */
function bpi_get_image_type($image_field_name, Node $node) {
  /*
   * We assume that the image type is the last part of the field name, i.e.
   *   field_{{node type}}_{{image type}}
   */
  $pattern = '/field_' . preg_quote($node->getType(), '/') . '_(?<image_type>.+)/';
  if (preg_match($pattern, $image_field_name, $matches)) {
    return $matches['image_type'];
  }
  return NULL;
}
